
app.UseEndpoints(endpoints =>
{
     endpoints.MapControllerRoute(
     name: "default",
     pattern: "{controller=Home}/{action=Index}/{id?}");
     endpoints.MapRazorPages();
     endpoints.MapControllers();
});


"EncKey": "0C41775F708F44CAB557805B09DCA89D",
"MasterKey": "9CF7D49F76C24C37B4A4407FFC86B5EF",


        public bool ValidateToken(out string uid, out string? fullName, bool fromForm = false)
        {
            uid = fullName = null;
            string EncKey = _options.EncKey;
            var tokenValidationParameters = TokenValidationParameters();

            try
            {
                //string authString = fromForm ? request.Form["authtoken"] : request.Headers["Authorization"];
                string authString = fromForm ? _context.HttpContext.Request.Form["auth"] : _context.HttpContext.Request.Headers["Authorization"];
                if (string.IsNullOrEmpty(authString)) return false;

                if (!fromForm) authString = authString.Replace("Bearer ", "");

                var claimsPrincipal = new JwtSecurityTokenHandler().ValidateToken(authString, tokenValidationParameters, out var token);

                if (token is JwtSecurityToken jwtSecurityToken)
                {
                    fullName = jwtSecurityToken.Claims.First(claim => claim.Type == "fullName").Value;
                    string U_name = fullName;

                    var FindUser =  _dbContext.tbl_Users.Where(a=> a.UserName == U_name).SingleOrDefault();
                    if (FindUser != null)
                    {
                        try
                        {
                            uid = jwtSecurityToken.Claims.First(claim => claim.Type == "uid").Value;
                            uid = Decrypt(uid, EncKey);
                            return true;
                        }
                        catch
                        {
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception)
            {
                return false;
            }
        }





public TokenValidationParameters TokenValidationParameters()
{
    var res = new TokenValidationParameters()
    {
        ValidateLifetime = true,
        ClockSkew = TimeSpan.Zero,
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateIssuerSigningKey = true,
        ValidIssuer = site, //some string, normally web url,
        ValidAudience = site,
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_options.MasterKey))
    };
    return res;
}
